---
# Context configuration example, to be copied and adapted to your context (local, staging,...). Values do
# not have be encrypted or base64 encoded, ansible is taking care of that in the templates. Context files are
# ignored and won't be commited.

# Context name, must match a context in your .kube/config file
context: k3d-local

# Components to be installed in your cluster
# Priorities defined here are used to control the order in which the components are installed. It starts from 10
# and then increases by steps of 10. For the moment, we use the following priorities:
#   10: ingress controllers
#   20: important cluster components (cert-manager, prometheus,...)
#   30: data stores and similar tools (postgres, redis,...)
#   40: monitoring and security tools (falco, kubewatch,...)
#   50: administration tools (kubernetes-dashboard, pgadmin,...)
#   60: automation and deployment tools (gitlab, harbor, rundeck,...)
#   70: other tools (dokuwiki, mattermost,...)
components:
  ingress_nginx: { enabled: true, type: ingress, priority: 10 }
  cert_manager: { enabled: true, type: security, priority: 20 }
  oauth2_proxy: { enabled: false, type: security, priority: 20 }
  prometheus: { enabled: false, type: monitoring, priority: 20, wait: yes }
  nats: { enabled: false, type: messaging, priority: 30, wait: yes }
  postgresql: { enabled: true, type: datastore, priority: 30, wait: yes }
  redis: { enabled: true, type: datastore, priority: 30, wait: yes }
  rabbitmq: { enabled: false, type: messaging, priority: 30, wait: yes }
  goldpinger: { enabled: false, type: monitoring, priority: 40, wait: yes }
  grafana: { enabled: false, type: monitoring, priority: 40, wait: yes }
  kubernetes_dashboard: { enabled: false, type: administration, priority: 50, wait: yes }
  pgadmin: { enabled: false, type: administration, priority: 50, wait: yes }
  harbor: { enabled: false, type: deployment, priority: 60, wait: yes }
  rundeck: { enabled: false, type: automation, priority: 60, wait: yes }
  dokuwiki: { enabled: false, type: communication, priority: 70, wait: yes }
  mattermost: { enabled: false, type: communication, priority: 70, wait: yes }

# Extra namespaces to be created in your cluster
# Should be defined using the following notation:
#   kubernetes_extra_namespaces:
#     - first-namespace
#     - second-namespace
kubernetes_extra_namespaces: []
# Extra service accounts to be created in your cluster
# Should be defined using the following notation:
#   kubernetes_extra_service_accounts:
#     - name: administration-service-account
#       namespace: administration
#     - name: deployment-service-account
#       namespace: deployment
kubernetes_extra_service_accounts: []

# Your company's or organization's name. This is mostly used to fill in some titles and banners.
organization: My Organization

# The domain to use as a base for all ingress entries (e.g. grafana.localtest.me). Use your own domain
# for non local environments and use domains like localtest.me or lvh.me for local environments
domain: localtest.me

# The domain to use as a base for emails and oauth settings
email_domain: company.com

# The internal domain used by the cluster. Do not change if you don't know what this is.
cluster_domain: cluster.local

# Main ingress configuration
ingress: nginx
ingress_service_ip: 127.0.0.1
ingress_service_type: LoadBalancer

# ingress-nginx configuration
## Metrics settings
ingress_nginx_metrics_enabled: true
ingress_nginx_metrics_port: 10254
## Scaling settings
ingress_nginx_autoscaling_enabled: false
ingress_nginx_autoscaling_max_replicas: 2
ingress_nginx_autoscaling_min_replicas: 1
ingress_nginx_autoscaling_target_cpu_utilization: 75
ingress_nginx_autoscaling_target_ram_utilization: 75
ingress_nginx_replicas: 1
## Application settings
ingress_nginx_config: {}
ingress_nginx_extra_args: {}
ingress_nginx_headers: {}
ingress_nginx_proxy_headers: {}

# cert-manager configuration
## Application configuration
cert_manager_log_level: 2
## Metrics settings
cert_manager_metrics_enabled: true
## Scaling settings
cert_manager_replicas: 1

# dokuwiki configuration
## Administrator credentials
dokuwiki_admin_user: admin
dokuwiki_admin_email: "admin@{{ email_domain }}"
dokuwiki_admin_password: dokuwiki
dokuwiki_admin_name: "Administrator"
## Metrics settings
dokuwiki_metrics_enabled: true
## Persistence settings
dokuwiki_persistence_enabled: false
dokuwiki_persistence_size: 2Gi

# goldpinger configuration
## Application settings
goldpinger_hosts: []

# grafana configuration
## Administrator credentials
grafana_admin_user: admin
grafana_admin_password: grafana
## Database settings
grafana_database_enabled: true
grafana_database_host: postgresql-pgpool.datastore.svc.cluster.local
grafana_database_name: grafana
grafana_database_user: grafana
grafana_database_password: grafana
## OAuth settings
grafana_oauth_enabled: false
grafana_oauth_client_id:
grafana_oauth_client_secret:
## Persistence settings
grafana_persistence_enabled: false
grafana_persistence_size: 2Gi
## Application settings
grafana_plugins:
  - grafana-clock-panel

# harbor configuration
## Module settings
harbor_chartmuseum_enabled: false
harbor_clair_enabled: false
harbor_notary_enabled: false
harbor_persistence_enabled: false
harbor_trivy_enabled: true
## Administrator credentials
harbor_admin_password: harbor
harbor_secret_key: AfAdutIdnecoyheu
## Database settings
harbor_database_type: external
harbor_database_host: postgresql-pgpool.datastore.svc.cluster.local
harbor_database_name: harbor
harbor_database_user: harbor
harbor_database_password: harbor
## Redis settings
harbor_redis_type: external
harbor_redis_host: redis.datastore.svc.cluster.local
harbor_redis_port: 26379
## Registry settings
harbor_registry_user: harbor_registry_user
harbor_registry_password: harbor_registry_password
### If you update the username or password of registry, make sure use cli tool htpasswd to generate the bcrypt hash
### e.g. "htpasswd -nbBC10 $username $password"
harbor_registry_ht_password: harbor_registry_user:$2y$10$9L4Tc0DJbFFMB6RdSCunrOpTHdwhid4ktBJmLD00bYgqkkGOvll3m
registry_database_name: registry
registry_database_user: harbor
registry_database_password: harbor
## Clair settings
clair_database_name: clair
clair_database_user: harbor
clair_database_password: harbor
## Persistence settings
harbor_persistence_chartmuseum_size: 2Gi
harbor_persistence_database_size: 2Gi
harbor_persistence_jobservice_size: 2Gi
harbor_persistence_redis_size: 2Gi
harbor_persistence_registry_size: 2Gi
harbor_persistence_trivy_size: 2Gi

# kubernetes-dashboard configuration
## Application configuration
kubernetes_dashboard_config_items_displayed: 20
kubernetes_dashboard_config_logs_refresh_interval: 5
kubernetes_dashboard_config_notifications_disabled: true
kubernetes_dashboard_config_resouce_refresh_interval: 5
kubernetes_dashboard_rbac_readonly: true
## Scaling settings
kubernetes_dashboard_replicas: 1

# mattermost configuration
## Database settings
mattermost_database_host: postgresql-pgpool.datastore.svc.cluster.local
mattermost_database_name: mattermost
mattermost_database_user: mattermost
mattermost_database_password: mattermost

# nats configuration
## Scaling settings
nats_replicas: 1

# oauth2-proxy configuration
## OAuth settings
oauth2_proxy_provider: google
oauth2_proxy_client_id: id
oauth2_proxy_client_secret: secret
### use `openssl rand -base64 32 | head -c 32 | base64` to generate
oauth2_proxy_cookie_secret: RjF4QnZwQUgreXF1SXNNUFRIbi9rL3cyWFp5MjdyR0M=
oauth2_proxy_email_domain: "{{ email_domain }}"
## Scaling settings
oauth2_proxy_replicas: 1

# pgadmin configuration
## Administrator credentials
pgadmin_admin_email: "admin@{{ email_domain }}"
pgadmin_admin_password: pgadmin
## Persistence settings
pgadmin_persistence_enabled: false
pgadmin_persistence_size: 2Gi

# postgresql configuration
## Administrator credentials
postgresql_admin_user: postgres
postgresql_admin_password: postgres
## Replication settings
postgresql_replication_enabled: true
postgresql_replication_user: replicator
postgresql_replication_password: replicator
## Metrics settings
postgresql_metrics_enabled: true
## Persistence settings
postgresql_persistence_enabled: false
postgresql_persistence_size: 2Gi
## Scaling settings
postgresql_replicas: 2
## Application settings
postgresql_config_max_connections: 32
postgresql_config_shared_libraries: pgaudit,pg_stat_statements,repmgr
## pgpool settings
pgpool_admin_user: pgpool
pgpool_admin_password: pgpool
pgpool_replicas: 1

# prometheus configuration
## Modules settings
pushgateway_enabled: false
## Application settings
prometheus_evaluation_interval: 1m
prometheus_retention: 30d
prometheus_scrape_interval: 1m
prometheus_scrape_timeout: 10s
## Persistence settings
alertmanager_persistence_enabled: false
alertmanager_persistence_size: 2Gi
prometheus_persistence_enabled: false
prometheus_persistence_size: 2Gi
pushgateway_persistence_enabled: false
pushgateway_persistence_size: 2Gi
## Scaling settings
prometheus_replicas: 1
pushgateway_replicas: 1

# rabbitmq configuration
## Administrator credentials
rabbitmq_admin_user: admin
rabbitmq_admin_password: admin
## Application settings
rabbitmq_erlang_cookie: Vap3quennubdabAm
rabbitmq_plugins:
  - rabbitmq_management
  - rabbitmq_peer_discovery_k8s
## Persistence settings
rabbitmq_persistence_enabled: false
rabbitmq_persistence_size: 2Gi
## Scaling settings
rabbitmq_replicas: 1

# redis configuration
## Persistence settings
redis_persistence_enabled: false
redis_persistence_size: 2Gi
## Scaling settings
redis_replicas: 1
## Application settings
redis_master_set: master
redis_quorum: 1

# rundeck configuration
## Database settings
rundeck_database_host: postgresql-pgpool.datastore.svc.cluster.local
rundeck_database_name: rundeck
rundeck_database_user: rundeck
rundeck_database_password: rundeck
## Persistence settings
rundeck_persistence_enabled: false
rundeck_persistence_size: 2Gi
